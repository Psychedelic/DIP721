type GenericValue = variant {
  Nat64Content : nat64;
  Nat32Content : nat32;
  BoolContent : bool;
  Nat8Content : nat8;
  Int64Content : int64;
  IntContent : int;
  NatContent : nat;
  Nat16Content : nat16;
  Int32Content : int32;
  Int8Content : int8;
  Int16Content : int16;
  BlobContent : vec nat8;
  Principal : principal;
  TextContent : text;
};
type InitArgs = record {
  owners : opt vec principal;
  logo : opt text;
  name : opt text;
  symbol : opt text;
};
type Metadata = record {
  owners : vec principal;
  logo : opt text;
  name : opt text;
  created_at : nat64;
  upgraded_at : nat64;
  symbol : opt text;
};
type NftError = variant {
  SelfTransfer;
  TokenNotFound;
  TxNotFound;
  SelfApprove;
  OperatorNotFound;
  Unauthorized;
  ExistedNFT;
  OwnerNotFound;
  Other : text;
};
type Result = variant { Ok : nat; Err : NftError };
type Result_1 = variant { Ok : TokenMetadata; Err : NftError };
type Result_2 = variant { Ok : vec TokenMetadata; Err : NftError };
type Result_3 = variant { Ok : vec text; Err : NftError };
type Result_4 = variant { Ok : bool; Err : NftError };
type Result_5 = variant { Ok : opt principal; Err : NftError };
type Result_6 = variant { Ok : principal; Err : NftError };
type Result_7 = variant { Ok : TxEvent; Err : NftError };
type SupportedInterface = variant { Burn; Mint; Approval; TransactionHistory };
type TokenMetadata = record {
  transferred_at : opt nat64;
  transferred_by : opt principal;
  owner : principal;
  operator : opt principal;
  properties : vec record { text; GenericValue };
  token_identifier : text;
  minted_at : nat64;
  minted_by : principal;
};
type TxEvent = record {
  time : nat64;
  operation : text;
  details : vec record { text; GenericValue };
  caller : principal;
};
service : (opt InitArgs) -> {
  approve : (principal, text) -> (Result);
  approveDip721 : (principal, text) -> (Result);
  balanceOf : (principal) -> (Result) query;
  balanceOfDip721 : (principal) -> (Result) query;
  getMetadataDip721 : (text) -> (Result_1) query;
  getMetadataForUserDip721 : (principal) -> (Result_2) query;
  getTokenIdsForUserDip721 : (principal) -> (Result_3) query;
  isApprovedForAll : (principal, principal) -> (Result_4) query;
  logo : () -> (opt text) query;
  logoDip721 : () -> (opt text) query;
  metadata : () -> (Metadata) query;
  mint : (principal, text, vec record { text; GenericValue }) -> (Result);
  mintDip721 : (principal, text, vec record { text; GenericValue }) -> (Result);
  name : () -> (opt text) query;
  nameDip721 : () -> (opt text) query;
  operatorOf : (text) -> (Result_5) query;
  operatorTokenIds : (principal) -> (Result_3) query;
  operatorTokenMetadata : (principal) -> (Result_2) query;
  ownerOf : (text) -> (Result_6) query;
  ownerOfDip721 : (text) -> (Result_6) query;
  ownerTokenIds : (principal) -> (Result_3) query;
  ownerTokenMetadata : (principal) -> (Result_2) query;
  owners : () -> (vec principal) query;
  setApprovalForAll : (principal, bool) -> (Result);
  setLogo : (text) -> ();
  setLogoDip721 : (text) -> ();
  setName : (text) -> ();
  setNameDip721 : (text) -> ();
  setOwners : (vec principal) -> ();
  setSymbol : (text) -> ();
  setSymbolDip721 : (text) -> ();
  supportedInterfaces : () -> (vec SupportedInterface) query;
  supportedInterfacesDip721 : () -> (vec SupportedInterface) query;
  symbol : () -> (opt text) query;
  symbolDip721 : () -> (opt text) query;
  tokenMetadata : (text) -> (Result_1) query;
  totalSupply : () -> (nat) query;
  totalSupplyDip721 : () -> (nat) query;
  transaction : (nat) -> (Result_7);
  transfer : (principal, text) -> (Result);
  transferFrom : (principal, principal, text) -> (Result);
  transferFromDip721 : (principal, principal, text) -> (Result);
}